(in-package :jsown-tests)

(def-suite :test-accessors
    :description "Tests the functionality the accessors provide"
    :in test-all)

(test keywords
      (is (equal (keywords (parse "{\"foo\":\"bar\",\"baz\":\"bang\"}"))
                 '("foo" "baz"))
          "Fetching all keywords")
      (is (equal (keywords (parse "{\"foo\":{\"bang\":\"bingo\"}}"))
                 '("foo"))
          "Only fetches the top-level keyword")
      (is (equal (keywords (parse "{\"foo\":100,\"bang\":1000,\"bingo\":10,\"balooga\":10.10}" "bingo" "foo"))
                 '("foo" "bingo"))
          "Fetches the keywords in the order in which they appeared in the document"))

(test val-fetching
      (is (equal (val (parse "{\"foo\":\"bar\"}") "foo")
                 "bar")
          "foo should have value bar")
      (is (equal (val (parse "{\"foo\":\"bar\",\"bang\":\"bonzo\",\"bing\":\"bong\"}") "bang")
                 "bonzo")
          "bang has value bonzo")
      (is (equal (val (parse "{\"foo\":\"bar\",\"bang\":100,\"bing\":10.10}") "bang")
                 100)
          "numbers must be returned too")
      (is (equal (val (parse "{\"foo\":\"bar\",\"bang\":100,\"bing\":10.10}") "bing")
                 (/ 1010 100))
          "as do float-like numbers"))

(test val-overwriting
      (let ((object (parse "{\"foo\":\"bar\",\"baz\":\"bang\"}")))
        (setf (val object "foo") 1000)
        (is (equal (val object "foo") 1000)
            "foo has been set to 1000 before"))
      (let ((object (parse "{\"foo\":\"bar\",\"baz\":\"bang\"}")))
        (setf (val object "baz") "iznew")
        (is (equal (val object "baz") "iznew")
            "baz has been set to iznew")))

(test val-adding
      (let ((object (parse "{\"foo\":\"bar\",\"baz\":\"bang\"}")))
        (setf (val object "balooga") 1000)
        (is (equal (val object "balooga") 1000)
            "balooga has been set to 1000 before")
        (is (equal (val object "foo") "bar")
            "foo should not have been changed")
        (is (equal (val object "baz") "bang")
            "baz should not have been changed")
        (is (equal (length (keywords object))
                   3)
            "Only one keyword should've been added"))
      (let ((object (empty-object)))
        (setf (val object "foo") "bar")
        (setf (val object "bar") "baz")
        (setf (val object "bing") 100)
        (setf (val object "bong") (/ 1010 100))
        (is (equal (val object "foo") "bar")
            "foo has been set to bar")
        (is (equal (val object "bar") "baz")
            "bar has been set to baz")
        (is (equal (val object "bing") 100)
            "bing has been set to 100")
        (is (equal (val object "bong") (/ 1010 100))
            "bong has been set to 10.10")
        (is (equal (length (keywords object)) 4)
            "Only the added keywords should be in the object")))
